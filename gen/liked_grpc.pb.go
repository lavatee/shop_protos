// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: liked.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Liked_GetLiked_FullMethodName           = "/liked.Liked/GetLiked"
	Liked_PostLiked_FullMethodName          = "/liked.Liked/PostLiked"
	Liked_DeleteLiked_FullMethodName        = "/liked.Liked/DeleteLiked"
	Liked_DeleteProductLiked_FullMethodName = "/liked.Liked/DeleteProductLiked"
)

// LikedClient is the client API for Liked service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikedClient interface {
	GetLiked(ctx context.Context, in *GetLikedRequest, opts ...grpc.CallOption) (*GetLikedResponse, error)
	PostLiked(ctx context.Context, in *PostLikedRequest, opts ...grpc.CallOption) (*PostLikedResponse, error)
	DeleteLiked(ctx context.Context, in *DeleteLikedRequest, opts ...grpc.CallOption) (*DeleteLikedResponse, error)
	DeleteProductLiked(ctx context.Context, in *DeleteProductLikedRequest, opts ...grpc.CallOption) (*DeleteProductLikedResponse, error)
}

type likedClient struct {
	cc grpc.ClientConnInterface
}

func NewLikedClient(cc grpc.ClientConnInterface) LikedClient {
	return &likedClient{cc}
}

func (c *likedClient) GetLiked(ctx context.Context, in *GetLikedRequest, opts ...grpc.CallOption) (*GetLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedResponse)
	err := c.cc.Invoke(ctx, Liked_GetLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likedClient) PostLiked(ctx context.Context, in *PostLikedRequest, opts ...grpc.CallOption) (*PostLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostLikedResponse)
	err := c.cc.Invoke(ctx, Liked_PostLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likedClient) DeleteLiked(ctx context.Context, in *DeleteLikedRequest, opts ...grpc.CallOption) (*DeleteLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLikedResponse)
	err := c.cc.Invoke(ctx, Liked_DeleteLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likedClient) DeleteProductLiked(ctx context.Context, in *DeleteProductLikedRequest, opts ...grpc.CallOption) (*DeleteProductLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductLikedResponse)
	err := c.cc.Invoke(ctx, Liked_DeleteProductLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikedServer is the server API for Liked service.
// All implementations must embed UnimplementedLikedServer
// for forward compatibility.
type LikedServer interface {
	GetLiked(context.Context, *GetLikedRequest) (*GetLikedResponse, error)
	PostLiked(context.Context, *PostLikedRequest) (*PostLikedResponse, error)
	DeleteLiked(context.Context, *DeleteLikedRequest) (*DeleteLikedResponse, error)
	DeleteProductLiked(context.Context, *DeleteProductLikedRequest) (*DeleteProductLikedResponse, error)
	mustEmbedUnimplementedLikedServer()
}

// UnimplementedLikedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLikedServer struct{}

func (UnimplementedLikedServer) GetLiked(context.Context, *GetLikedRequest) (*GetLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiked not implemented")
}
func (UnimplementedLikedServer) PostLiked(context.Context, *PostLikedRequest) (*PostLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLiked not implemented")
}
func (UnimplementedLikedServer) DeleteLiked(context.Context, *DeleteLikedRequest) (*DeleteLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiked not implemented")
}
func (UnimplementedLikedServer) DeleteProductLiked(context.Context, *DeleteProductLikedRequest) (*DeleteProductLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductLiked not implemented")
}
func (UnimplementedLikedServer) mustEmbedUnimplementedLikedServer() {}
func (UnimplementedLikedServer) testEmbeddedByValue()               {}

// UnsafeLikedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikedServer will
// result in compilation errors.
type UnsafeLikedServer interface {
	mustEmbedUnimplementedLikedServer()
}

func RegisterLikedServer(s grpc.ServiceRegistrar, srv LikedServer) {
	// If the following call pancis, it indicates UnimplementedLikedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Liked_ServiceDesc, srv)
}

func _Liked_GetLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikedServer).GetLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liked_GetLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikedServer).GetLiked(ctx, req.(*GetLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liked_PostLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikedServer).PostLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liked_PostLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikedServer).PostLiked(ctx, req.(*PostLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liked_DeleteLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikedServer).DeleteLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liked_DeleteLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikedServer).DeleteLiked(ctx, req.(*DeleteLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liked_DeleteProductLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikedServer).DeleteProductLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liked_DeleteProductLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikedServer).DeleteProductLiked(ctx, req.(*DeleteProductLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Liked_ServiceDesc is the grpc.ServiceDesc for Liked service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Liked_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liked.Liked",
	HandlerType: (*LikedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiked",
			Handler:    _Liked_GetLiked_Handler,
		},
		{
			MethodName: "PostLiked",
			Handler:    _Liked_PostLiked_Handler,
		},
		{
			MethodName: "DeleteLiked",
			Handler:    _Liked_DeleteLiked_Handler,
		},
		{
			MethodName: "DeleteProductLiked",
			Handler:    _Liked_DeleteProductLiked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liked.proto",
}
