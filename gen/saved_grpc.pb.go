// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: saved.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Saved_GetLiked_FullMethodName  = "/Saved.Saved/GetLiked"
	Saved_PostLiked_FullMethodName = "/Saved.Saved/PostLiked"
	Saved_PutLiked_FullMethodName  = "/Saved.Saved/PutLiked"
	Saved_PutCart_FullMethodName   = "/Saved.Saved/PutCart"
	Saved_PostCart_FullMethodName  = "/Saved.Saved/PostCart"
	Saved_GetCart_FullMethodName   = "/Saved.Saved/GetCart"
)

// SavedClient is the client API for Saved service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SavedClient interface {
	GetLiked(ctx context.Context, in *GetLikedRequest, opts ...grpc.CallOption) (*GetLikedResponse, error)
	PostLiked(ctx context.Context, in *PostLikedRequest, opts ...grpc.CallOption) (*PostLikedResponse, error)
	PutLiked(ctx context.Context, in *PutLikedRequest, opts ...grpc.CallOption) (*PutLikedResponse, error)
	PutCart(ctx context.Context, in *PutCartRequest, opts ...grpc.CallOption) (*PutCartResponse, error)
	PostCart(ctx context.Context, in *PostCartRequest, opts ...grpc.CallOption) (*PostCartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
}

type savedClient struct {
	cc grpc.ClientConnInterface
}

func NewSavedClient(cc grpc.ClientConnInterface) SavedClient {
	return &savedClient{cc}
}

func (c *savedClient) GetLiked(ctx context.Context, in *GetLikedRequest, opts ...grpc.CallOption) (*GetLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedResponse)
	err := c.cc.Invoke(ctx, Saved_GetLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) PostLiked(ctx context.Context, in *PostLikedRequest, opts ...grpc.CallOption) (*PostLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostLikedResponse)
	err := c.cc.Invoke(ctx, Saved_PostLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) PutLiked(ctx context.Context, in *PutLikedRequest, opts ...grpc.CallOption) (*PutLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutLikedResponse)
	err := c.cc.Invoke(ctx, Saved_PutLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) PutCart(ctx context.Context, in *PutCartRequest, opts ...grpc.CallOption) (*PutCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutCartResponse)
	err := c.cc.Invoke(ctx, Saved_PutCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) PostCart(ctx context.Context, in *PostCartRequest, opts ...grpc.CallOption) (*PostCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCartResponse)
	err := c.cc.Invoke(ctx, Saved_PostCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, Saved_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SavedServer is the server API for Saved service.
// All implementations must embed UnimplementedSavedServer
// for forward compatibility.
type SavedServer interface {
	GetLiked(context.Context, *GetLikedRequest) (*GetLikedResponse, error)
	PostLiked(context.Context, *PostLikedRequest) (*PostLikedResponse, error)
	PutLiked(context.Context, *PutLikedRequest) (*PutLikedResponse, error)
	PutCart(context.Context, *PutCartRequest) (*PutCartResponse, error)
	PostCart(context.Context, *PostCartRequest) (*PostCartResponse, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	mustEmbedUnimplementedSavedServer()
}

// UnimplementedSavedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSavedServer struct{}

func (UnimplementedSavedServer) GetLiked(context.Context, *GetLikedRequest) (*GetLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiked not implemented")
}
func (UnimplementedSavedServer) PostLiked(context.Context, *PostLikedRequest) (*PostLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLiked not implemented")
}
func (UnimplementedSavedServer) PutLiked(context.Context, *PutLikedRequest) (*PutLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLiked not implemented")
}
func (UnimplementedSavedServer) PutCart(context.Context, *PutCartRequest) (*PutCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCart not implemented")
}
func (UnimplementedSavedServer) PostCart(context.Context, *PostCartRequest) (*PostCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCart not implemented")
}
func (UnimplementedSavedServer) GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedSavedServer) mustEmbedUnimplementedSavedServer() {}
func (UnimplementedSavedServer) testEmbeddedByValue()               {}

// UnsafeSavedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SavedServer will
// result in compilation errors.
type UnsafeSavedServer interface {
	mustEmbedUnimplementedSavedServer()
}

func RegisterSavedServer(s grpc.ServiceRegistrar, srv SavedServer) {
	// If the following call pancis, it indicates UnimplementedSavedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Saved_ServiceDesc, srv)
}

func _Saved_GetLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_GetLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetLiked(ctx, req.(*GetLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_PostLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).PostLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_PostLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).PostLiked(ctx, req.(*PostLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_PutLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).PutLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_PutLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).PutLiked(ctx, req.(*PutLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_PutCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).PutCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_PutCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).PutCart(ctx, req.(*PutCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_PostCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).PostCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_PostCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).PostCart(ctx, req.(*PostCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Saved_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Saved_ServiceDesc is the grpc.ServiceDesc for Saved service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Saved_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Saved.Saved",
	HandlerType: (*SavedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiked",
			Handler:    _Saved_GetLiked_Handler,
		},
		{
			MethodName: "PostLiked",
			Handler:    _Saved_PostLiked_Handler,
		},
		{
			MethodName: "PutLiked",
			Handler:    _Saved_PutLiked_Handler,
		},
		{
			MethodName: "PutCart",
			Handler:    _Saved_PutCart_Handler,
		},
		{
			MethodName: "PostCart",
			Handler:    _Saved_PostCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _Saved_GetCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saved.proto",
}
